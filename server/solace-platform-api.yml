openapi: 3.0.0
info:
  title: Solace Platform API
  description: Solace Platform API
  version: 0.0.1
servers:
  - url: /v1

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  parameters:
    api_name:
      name: api_name
      description: the name of the api
      in: path
      required: true
      schema:
        type: string
    api_domain_name:
      name: api_domain_name
      description: the name of the api domain
      in: path
      required: true
      schema:
        type: string
    api_product_id:
      name: api_product_id
      description: the id of the api product
      in: path
      required: true
      schema:
        type: string
    attribute_name:
      name: attribute_name
      description: name of an attribute attached to a resource
      in: path
      required: true
      schema:
        type: string
    app_id:
      name: app_id
      description: id of an app
      in: path
      required: true
      schema:
        type: string
    company_id:
      name: company_id
      description: id of a company
      in: path
      required: true
      schema:
        type: string
    page_size:
     name: pageSize
     in: query
     description: "The number of itesm to get per page. Min: 1 Max: 100"
     required: false
     schema: 
      type: integer
      format: int32
      default: 20
    page_number:
     name: pageNumber
     in: query
     description: "The page number to get. Min: 1"
     required: false
     schema: 
       type: integer
       format: int32
       default: 1
  schemas:
    ErrorResponse: 
     type: object
     properties: 
      message: 
       type: string
       example: "An error occurred"
      errorId: 
       type: string
       example: "123e4567-e89b-12d3-a456-426655440000"
      meta: 
       type: object
       additionalProperties: 
        type: object
        example: "'object': { 'field': 'description' }"
       example: "'object': { 'field': 'description' }"
    APIDomain: 
     required: 
      - enforceUniqueTopicNames
     type: object
     properties: 
      createdTime: 
       type: integer
       format: int64
       readOnly: true
       example: 1583706406
      updatedTime: 
       type: integer
       format: int64
       readOnly: true
       example: 1583706406
      createdBy: 
       type: string
       readOnly: true
       example: joe.bloggs
      changedBy: 
       type: string
       readOnly: true
       example: jack.black
      id: 
       type: string
       readOnly: true
       example: 12345678
      name: 
       type: string
       example: "Acme Rideshare"
      topicDomain: 
       type: string
       example: "com/solace"
      description: 
       type: string
       example: "API Domain created by the Solace PubSub+ Cloud API documentation"
      enforceUniqueTopicNames: 
       type: boolean
       example: true
      apis:           
       example:
        - Billing App
        - Driver App
       type: array
       readOnly: true
       items: 
        type: string
        readOnly: true
      type: 
       type: string
    APIListItem:
      type: object
      properties:
        name: 
          type: string
          example: Billing App
        apiDomain: 
          type: string
          example: Acme Rideshare
    API: 
     required: 
      - apiDomainName
      - name
     type: object
     properties: 
      createdTime: 
       type: integer
       format: int64
       readOnly: true
       example: 1583706406
      updatedTime: 
       type: integer
       format: int64
       readOnly: true
       example: 1583706406
      createdBy: 
       type: string
       readOnly: true
       example: joe.bloggs
      changedBy: 
       type: string
       readOnly: true
       example: jack.black
      id: 
       type: string
       readOnly: true
       example: 12345678
      name: 
       maxLength: 60
       minLength: 1
       type: string
       example: "Billing App"
      version: 
       type: string
       readOnly: true
       example: "0.0.1"
      description: 
       type: string
       example: "API created by Solace PubSub+ Cloud documentation"
      apiDomainName: 
       type: string
       example: Acme Rideshare
      revisionComment: 
       maxLength: 255
       minLength: 0
       type: string
       writeOnly: true
       example: "Changed api name"
      revisionNumber: 
       type: integer
       format: int32
       readOnly: true
       example: 
        - 1
        - 2
      apiClass: 
       type: string
       example: solace
       enum: 
        - unspecified
        - kafka_connector
        - solace_connector
        - kafka_application
      type: 
       type: string
       readOnly: true
     discriminator: 
      propertyName: apiClass
    APIProduct:
      required:
      - name
      - displayName
      - attributes
      - subResources
      - pubResources
      - apis
      type: object
      default: {}
      description: The API Product Schema
      example:
      -   apis:
          - '{api1}'
          - '{api2}'
          approvalType: manual
          attributes:
          -   name: access
              value: '{public, private, or internal}'
          -   name: '{attribute_name2}'
              value: '{value2}'
          description: '{description}'
          displayName: '{display_name}'
          environments:
          - '{test}'
          - '{prod}'
          name: '{name}'
          pubResources:
          - '{/resource1}'
          - '{/resource2}'
          scopes:
          - '{scope1}'
          - '{scope2}'
          subResources:
          - '{/resource1}'
          - '{/resource2}'
      properties:
          apis:
              default: []
              description: APIs associated with this product.
              example:
                - '{api1}'
                - '{api2}'
              items:
                type: string
                example:
                  - '{api1}'
                  - '{api2}'
              type: array
          approvalType:
              description: manual or auto. If manual, credetials will only be activated on manual approval
              enum:
              - manual
              - auto
              type: string
          attributes:
              description: Arbitrary name/value pairs associated with the product.
              example:
              -   -   name: access
                      value: '{public, private, or internal}'
                  -   name: '{attribute_name2}'
                      value: '{value2}'
              items:
                properties:
                  name:
                    description: Attribute name, access is a special value as it governs access control to the product.
                    example:
                    - access
                    type: string
                  value:
                    description: Value of the attribute.
                    example:
                    - '{public, private, or internal}'
                    type: string
                required:
                  - name
                  - value
                type: object
              type: array
          description:
              default: ''
              description: An overview of the API product. Include key information about the API product that is not captured by other fields..
              example:
              - '{description}'
              type: string
          displayName:
              default: ''
              description: The name to be displayed in the UI or developer portal to developers registering for API access.
              example:
              - '{display_name}'
              type: string
          environments:
              description: A comma-separated list of environment name in an organization. Requests to environments not listed are rejected.
              example:
              -   - '{test}'
                  - '{prod}'
              items:
                example:
                - '{test}'
                - '{prod}'
                type: string
              type: array
          name:
              default: ''
              description: 'The internal name of the API Product. Characters you can use in the name are restricted to: A-Z0-9._\-$ %.'
              example:
              - '{name}'
              type: string
          pubResources:
              description: A comma separated list of Publish API resources to be bundled in the API Product.
              example:
              -   - '{/resource1}'
                  - '{/resource2}'
              items:
                example:
                - '{/resource1}'
                - '{/resource2}'
                type: string
              type: array
          scopes:
              description: A comma separated list of scopes. These must map to the scopes defined in an Oauth policy associated with the API Product. Any scope mismatch between an Acces Token presented and the API Product results in auth failure.
              example:
              -   - '{scope1}'
                  - '{scope2}'
              items:
                description: An explanation about the purpose of this instance.
                example:
                - '{scope1}'
                - '{scope2}'
                type: string
              type: array
          subResources:
              description: A comma separated list of Publish API resources to be bundled in the API Product.
              example:
              -   - '{/resource1}'
                  - '{/resource2}'
              items:
                example:
                - '{/resource1}'
                - '{/resource2}'
                type: string
              type: array      
security:
  - BasicAuth: []

tags:
  - name: apis
paths:
  /apis:
    get:
     tags:
      - apis
     description: Returns a list of APIs, maps to underlying event portal api /api/v1/eventPortal/applications
     parameters:
     - $ref: '#/components/parameters/page_size'
     - $ref: '#/components/parameters/page_number'
     - name: apiDomainName
       schema:
         type: string
       example: Acme Rideshare
       description: Match only apis in the given api domain.
       in: query
       required: false
     responses:
       '200':
         description:  a list of the APIs
         content: 
           application/json:
             schema:
               type: array
               items: 
                 "$ref": "#/components/schemas/APIListItem"
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
  /apis/{api_name}:
    get:
     tags:
     - apis
     parameters:
     - $ref: '#/components/parameters/api_name'
     responses:
       '200':
         description: the API  corresponding to the name requested
         content: 
           application/json:
             schema:
               type: array
               items: 
                 "$ref": "#/components/schemas/API"
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
  /apis/{api_name}/spec:
   get:
     tags:
     - apis
     parameters:
     - $ref: '#/components/parameters/api_name'
     - name: async_api_version
       schema:
        type: string
        example: 2.0.0
        default: 2.0.0
       in: query
       required: false
     responses:
       '200':
         description: the API domain corresponding to the name requested
         content: 
           application/json:
             schema:
               type: string
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
  /apiDomains:
    get:
     tags:
      - apis
     parameters:
     - $ref: '#/components/parameters/page_size'
     - $ref: '#/components/parameters/page_number'
     responses:
       '200':
         description: the API domain corresponding to the name requested
         content: 
           application/json:
             schema:
               type: array
               items:
                 $ref: '#/components/schemas/APIDomain'
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
  /apiDomains/{api_domain_name}:
    get:
     tags:
     - apis
     parameters:
     - $ref: '#/components/parameters/api_domain_name'
     responses:
       '200':
         description: the API domain corresponding to the name requested
         content: 
           application/json:
             schema:
               $ref: '#/components/schemas/APIDomain'
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
  /apiProducts:
    post:
     tags:
     - apiProducts
     requestBody: 
       description: "Application domains have a name and topic domain."
       content: 
         "application/json;charset=UTF-8": 
           schema: 
            "$ref": "#/components/schemas/APIProduct"    
     responses:
       '201':
         description: list of API Products
         content: 
           application/json:
             schema:
               $ref: '#/components/schemas/APIProduct'
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
    get:
     tags:
      - apiProducts
     parameters:
     - $ref: '#/components/parameters/page_size'
     - $ref: '#/components/parameters/page_number'
     responses:
       '200':
         description: list of API Products
         content: 
           application/json:
             schema:
               type: array
               items:
                 $ref: '#/components/schemas/APIProduct'
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
