openapi: 3.0.0
info:
  title: Solace API Management Connector
  description: 'Solace API Management Connector API. Note: basic authentication security mechanism is deprecated.'
  version: 0.1.1
servers:
  - url: /v1

components:
  securitySchemes:
    BearerAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT 
    BasicAuth:
      type: http
      scheme: basic
      description: Deprecated, may be removed in future version of the API
    OpenId:
      type: openIdConnect
      openIdConnectUrl: /auth/.well-known/openid-configuration
  parameters:
    organization:
      name: organization
      description: the name of the organization (tenant) a resource belongs to
      in: path
      required: true
      schema:
        type: string
    app_name:
      name: app_name
      description: the name of the app
      in: path
      required: true
      schema:
        type: string
    api_name:
      name: api_name
      description: the name of the api
      in: path
      required: true
      schema:
        type: string
    api_domain_name:
      name: api_domain_name
      description: the name of the api domain
      in: path
      required: true
      schema:
        type: string
    api_product_name:
      name: api_product_name
      description: the id of the api product
      in: path
      required: true
      schema:
        type: string
    attribute_name:
      name: attribute_name
      description: name of an attribute attached to a resource
      in: path
      required: true
      schema:
        type: string
    app_id:
      name: app_id
      description: id of an app
      in: path
      required: true
      schema:
        type: string
    company_id:
      name: company_id
      description: id of a company
      in: path
      required: true
      schema:
        type: string
    developer_username:
      name: developer_username
      description: username of developer
      in: path
      required: true
      schema:
        type: string
    env_name:
      name: env_name
      in: path
      required: true
      schema: 
        type: string
    page_size:
     name: pageSize
     in: query
     description: "The number of items to get per page. Min: 1 Max: 100"
     required: false
     schema: 
      type: integer
      format: int32
      default: 20
    page_number:
     name: pageNumber
     in: query
     description: "The page number to get. Min: 1"
     required: false
     schema: 
       type: integer
       format: int32
       default: 1
    topicSyntax:
      name: topicSyntax
      in: query
      schema:
        type: string
        default: smf
        enum:
        - smf
        - mqtt
  schemas:
    ErrorResponse: 
     type: object
     properties: 
      message: 
       type: string
       example: "An error occurred"
      errorId: 
       type: string
       example: "123e4567-e89b-12d3-a456-426655440000"
      meta: 
       type: object
       additionalProperties: 
        type: object
        example: "'object': { 'field': 'description' }"
       example: "'object': { 'field': 'description' }"
    APIDomain: 
     description: "Event Portal API Domain information. Currently only provided as utiity to retrieve metadata from the Event Portal."
     required: 
      - enforceUniqueTopicNames
     type: object
     properties: 
      createdTime: 
       type: integer
       format: int64
       readOnly: true
       example: 1583706406
      updatedTime: 
       type: integer
       format: int64
       readOnly: true
       example: 1583706406
      createdBy: 
       type: string
       readOnly: true
       example: joe.bloggs
      changedBy: 
       type: string
       readOnly: true
       example: jack.black
      id: 
       type: string
       readOnly: true
       example: 12345678
      name: 
       type: string
       example: "Acme Rideshare"
      topicDomain: 
       type: string
       example: "com/solace"
      description: 
       type: string
       example: "API Domain created by the Solace PubSub+ Cloud API documentation"
      enforceUniqueTopicNames: 
       type: boolean
       example: true
      apis:           
       example:
        - Billing App
        - Driver App
       type: array
       readOnly: true
       items: 
        type: string
        readOnly: true
      type: 
       type: string
    APIListItem:
      description: "API List item (short info). Currently only provided as utiity to retrieve metadata from the Event Portal."
      type: object
      properties:
        name: 
          type: string
          example: Billing App
        apiDomain: 
          type: string
          example: Acme Rideshare
        description:
          type: string
          example: Manage billing information
        tags:
          type: array
          items:
            type: string
            example: billing
    API: 
     description: "Event Portal API information. Currently only provided as utiity to retrieve metadata from the Event Portal."
     required: 
      - apiDomainName
      - name
     type: object
     properties: 
      createdTime: 
       type: integer
       format: int64
       readOnly: true
       example: 1583706406
      updatedTime: 
       type: integer
       format: int64
       readOnly: true
       example: 1583706406
      createdBy: 
       type: string
       readOnly: true
       example: joe.bloggs
      changedBy: 
       type: string
       readOnly: true
       example: jack.black
      id: 
       type: string
       readOnly: true
       example: 12345678
      name: 
       maxLength: 60
       minLength: 1
       type: string
       example: "Billing App"
      version: 
       type: string
       readOnly: true
       example: "0.0.1"
      description: 
       type: string
       example: "API created by Solace PubSub+ Cloud documentation"
      apiDomainName: 
       type: string
       example: Acme Rideshare
      tags:
        type: array
        description: tags of the API
        items:
          type: string
          example: elevator
      revisionComment: 
       maxLength: 255
       minLength: 0
       type: string
       writeOnly: true
       example: "Changed api name"
      revisionNumber: 
       type: integer
       format: int32
       readOnly: true
       example: 
        - 1
        - 2
      apiClass: 
       type: string
       example: solace
       enum: 
        - unspecified
        - kafka_connector
        - solace_connector
        - kafka_application
      type: 
       type: string
       readOnly: true
     discriminator: 
      propertyName: apiClass
    APIProduct:
      required:
      - name
      - displayName
      - attributes
      - subResources
      - pubResources
      - apis
      type: object
      description: "An API product consists of a list of API resources (URIs) and custom metadata required by the API provider. API products enable you to bundle and distribute your APIs to multiple developer groups simultaneously"
      properties:
          apis:
              description: APIs associated with this product.
              items:
                type: string
                example:
                  - '{api1}'
              type: array
          approvalType:
              description: manual or auto. If manual, credetials will only be activated on manual approval
              enum:
              - manual
              - auto
              type: string
          attributes:
              description: Arbitrary name/value pairs associated with the product.
              items:
                properties:
                  name:
                    description: Attribute name, access is a special value as it governs access control to the product.
                    example:
                      access
                    type: string
                  value:
                    description: Value of the attribute.
                    example:
                      '{public, private, or internal}'
                    type: string
                required:
                  - name
                  - value
                type: object
              type: array
          description:
              default: ''
              description: An overview of the API product. Include key information about the API product that is not captured by other fields..
              example:
               '{description}'
              type: string
          displayName:
              default: ''
              description: The name to be displayed in the UI or developer portal to developers registering for API access.
              example:
               '{display_name}'
              type: string
          environments:
              description: A comma-separated list of environment name in an organization. Requests to environments not listed are rejected.
              items:
                example:
                  '{test}'
                type: string
              type: array
          name:
              default: ''
              description: 'The internal name of the API Product. Characters you can use in the name are restricted to: A-Z0-9._\-$ %.'
              example:
                '{name}'
              type: string
          pubResources:
              description: A comma separated list of Publish API resources to be bundled in the API Product.
              items:
                example:
                  '{/resource1}'
                type: string
              type: array
          subResources:
              description: A comma separated list of Publish API resources to be bundled in the API Product.
              items:
                example:
                  '{/resource2}'
                type: string
              type: array  
          protocols:
            type: array
            items:
              $ref: '#/components/schemas/Protocol'
            
    APIProductPatch:
      type: object
      description: "Used for PATCH operation, An API product consists of a list of API resources (URIs) and custom metadata required by the API provider. API products enable you to bundle and distribute your APIs to multiple developer groups simultaneously"
      properties:
          apis:
              description: APIs associated with this product.
              items:
                type: string
                example:
                  '{api1}'
              type: array
          approvalType:
              description: manual or auto. If manual, credentials will only be activated on manual approval
              enum:
              - manual
              - auto
              type: string
          attributes:
              description: Arbitrary name/value pairs associated with the product.
              items:
                properties:
                  name:
                    description: Attribute name, access is a special value as it governs access control to the product.
                    example:
                    - access
                    type: string
                  value:
                    description: Value of the attribute.
                    example:
                      '{public, private, or internal}'
                    type: string
                required:
                  - name
                  - value
                type: object
              type: array
          description:
              description: An overview of the API product. Include key information about the API product that is not captured by other fields..
              example:
                '{description}'
              type: string
          displayName:
              description: The name to be displayed in the UI or developer portal to developers registering for API access.
              example:
                '{display_name}'
              type: string
          environments:
              description: A comma-separated list of environment name in an organization. Requests to environments not listed are rejected.
              items:
                example:
                  '{prod}'
                type: string
              type: array
          pubResources:
              description: A comma separated list of Publish API resources to be bundled in the API Product.
              items:
                example:
                  '{/resource2}'
                type: string
              type: array
          subResources:
              description: A comma separated list of Publish API resources to be bundled in the API Product.
              items:
                example:
                  '{/resource1}'
                type: string
              type: array      
          protocols:
            type: array
            items:
              $ref: '#/components/schemas/Protocol'

    Developer:
      description: "A profile for a developer. After the developer is created, they can register an app and receive API credentials"
      type: object
      properties:
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        userName:
          type: string
        attributes:
          $ref: '#/components/schemas/attributes'
      required:
        - email
        - firstName
        - lastName
        - userName
    attributes:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
          value:
            type: string
        required:
        - name
        - value

    DeveloperPatch:
      type: object
      description: "Used for PATCH operation, A profile for a developer. After the developer is created, they can register an app and receive API credentials"
      properties:
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        attributes:
          $ref: '#/components/schemas/attributes'
          
    App:
      type: object
      description: "An app associated with a developer. Associates the app with an API product, and auto-generates an API credentials for the app to use"
      properties:
        name: 
          type: string
          description: the uniuque name of this app, can not be updated
        displayName: 
          type: string
          description: friendly name of the app that can be changed subsequently
        expiresIn: 
          type: number
          description: A setting, in milliseconds, for the lifetime of the consumer key that will be  generated for the developer app. The default value, -1, indicates an infinite validity period. Once set, the expiration can't be updated.
        apiProducts:
          type: array
          items:
            type: string
        attributes:
          $ref: '#/components/schemas/attributes'
        callbackUrl:
            description: callback url
            type: string
            format: uri
        webHooks:
          type: array
          items:
            $ref: '#/components/schemas/WebHook'
        credentials:
          $ref: '#/components/schemas/Credentials'
      required:
      - name
      - apiProducts
      - credentials
    AppPatch:
      description: "Used for PATCH operation. An app associated with a developer. Associates the app with an API product, and auto-generates an API credentials for the app to use"
      type: object
      properties:
        displayName: 
          type: string
          description: friendly name of the app that can be changed subsequently
        apiProducts:
          type: array
          items:
            type: string
        attributes:
          $ref: '#/components/schemas/attributes'
        callbackUrl:
            description: callback url
            type: string
        webHooks:
          type: array
          items:
            $ref: '#/components/schemas/WebHook'
        credentials:
          $ref: '#/components/schemas/Credentials'
        status:
          $ref: '#/components/schemas/AppStatus'
    AppStatus:
      type: string
      enum:
      - approved
      - pending
    AppResponse:
      type: object
      description: "App Response Object - includes protocol binding information and app premissions. An app associated with a developer. Associates the app with an API product, and auto-generates an API credentials for the app to use."
      properties:
        name: 
          type: string
          description: the unique name of this app, can not be updated
        displayName: 
          type: string
          description: friendly name of the app that can be changed subsequently
        expiresIn: 
          type: number
          description: A setting, in milliseconds, for the lifetime of the consumer key that will be  generated for the developer app. The default value, -1, indicates an infinite validity period. Once set, the expiration can't be updated.
        apiProducts:
          type: array
          items:
            type: string
        attributes:
          $ref: '#/components/schemas/attributes'
        callbackUrl:
            description: callback url 
            type: string
        webHooks:
          type: array
          items:
            $ref: '#/components/schemas/WebHook'
        credentials:
          $ref: '#/components/schemas/Credentials'
        environments:
          type: array
          items:
            $ref: '#/components/schemas/AppEnvironment'
        status:
            $ref: '#/components/schemas/AppStatus'
      required:
      - name
      - apiProducts
      - credentials
          
    AppListItem:
      type: object
      properties:
          name:
            type: string
          displayName: 
            type: string
          appType:
            type: string
            enum:
            - developer
          ownerId:
            type: string
            example: "Developer-1"
          apiProducts:
            type: array 
            items:
              type: string
          status:
             $ref: '#/components/schemas/AppStatus'
            
    AppEnvironment:
          type: object
          properties:
            name: 
              type: string
              example: dev
            messagingProtocols:
              type: array
              items:
                $ref: '#/components/schemas/Endpoint'
            permissions:
              $ref: '#/components/schemas/Permissions'
    Permissions:
      description: lists all the publish and subscribe topics an app has access to. Restrictions on   topic elements are taken into account.
      type: object
      properties:
        subscribe:
          type: array
          items:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/ChannelPermission'
          example:
          - order/notifications/{country_id}/{order_id}:
              permissions: 
              - order/notifications/FR/>
              - order/notifications/DE/>
              channelId: c1
              isChannel: true
          - another/random/exception/{resource_id}:
              permissions: 
              - another/random/exception/1
              - another/random/exception/2
              isChannel: false              
        publish:
          type: array
          items:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/ChannelPermission'
          example:
          - order/create/{country_id}/{order_id}:
              permissions: 
              - order/create/FR/>
              - order/create/DE/>
              channelId: c2
              isChannel: true              
          - order/update/{country_id}/{order_id}:
              permissions: 
              - order/update/FR/>
              - order/update/DE/>
              channelId: orderUpdateChannel
              isChannel: true              
          - another/random/exception/{resource_id}:
              permissions: 
              - another/random/exception/3
              - another/random/exception/4
              isChannel: false
    ChannelPermission:
      description: a permission and its associated channel
      type: object
      required:
      - permissions
      properties:
        permissions:
          type: array
          items:
            type: string
          example: 
          - order/notifications/FR/>
          - order/notifications/DE/>
        channelId:
          type: string
        isChannel:
          type: boolean
          default: true
    
    Credentials:
      description: Credentials object associated with an app
      type: object
      required:
      - expiresAt
      properties:
        expiresAt:
          default: -1
          type: number
        issuedAt:
          type: number
        secret:
          type: object
          required:
          - consumerKey
          properties:
            consumerKey:
              type: string
            consumerSecret:
              type: string
    Environment:
      description: an environment
      type: object
      required:
      - name
      - description
      - serviceId
      properties:
        name:
          type: string
          example: dev
        description:
          type: string
          example: development environment
        serviceId:
          type: string
          example: xm7dc2dfas4
        exposedProtocols:
          type: array 
          items:
             $ref: '#/components/schemas/Protocol'
            

    EnvironmentResponse:
      description: an environment
      type: object
      required:
      - name
      - description
      - serviceId
      properties:
        name:
          type: string
          example: dev
        description:
          type: string
          example: development environment
        exposedProtocols:
          type: array 
          description: The protocols that can be exposed for use with APIs
          items:
             $ref: '#/components/schemas/Protocol'
        serviceId:
          type: string
          example: xm7dc2dfas4
        serviceName:
          type: string
          example: DEV-GW
        msgVpnName:
          type: string
        datacenterId:
          type: string
        datacenterProvider:
          type: string
        serviceTypeId:
          type: string
        serviceClassId:
          type: string
        creationState:
          type: string
        serviceClassDisplayedAttributes:
          type: object
          properties:
            High Availability:
              type: string
            Network Speed:
              type: string
            Storage:
              type: string
            Message Broker Tenancy:
              type: string
            Queues:
              type: string
            Clients:
              type: string
            Network Usage:
              type: string
          required:
          - High Availability
          - Network Speed
          - Storage
          - Message Broker Tenancy
          - Queues
          - Clients
          - Network Usage
        

    EnvironmentPatch:
      description: used for PATCH operation, an environment
      type: object
      properties:
        description:
          type: string
          example: development environment
        serviceId:
          type: string
          example: xm7dc2dfas4
        exposedProtocols:
          description: The protocols that can be exposed for use with APIs
          type: array 
          items:
             $ref: '#/components/schemas/Protocol'

    Service:
      description: provides information about a service in the Solace Cloud account.
      type: object
      properties:
        type:
          type: string
        timestamp:
          type: integer
        userId:
          type: string
        serviceId:
          type: string
        infrastructureId:
          type: string
        name:
          type: string
        msgVpnName:
          type: string
        datacenterId:
          type: string
        datacenterProvider:
          type: string
        serviceTypeId:
          type: string
        serviceClassId:
          type: string
        adminState:
          type: string
        adminProgress:
          type: string
        created:
          type: integer
        creationState:
          type: string
        messagingProtocols:
          type: array
          description: The protocols supported by this service
          items:
            $ref: '#/components/schemas/Endpoint'
        msgVpnAttributes:
          type: object
          properties:
            authenticationClientCertEnabled:
              type: string
            authenticationBasicEnabled:
              type: string
          required:
          - authenticationClientCertEnabled
          - authenticationBasicEnabled
        locked:
          type: boolean
        messagingStorage:
          type: integer
        serviceStage:
          type: string
        servicePackageId:
          type: string
        serviceClassDisplayedAttributes:
          type: object
          properties:
            High Availability:
              type: string
            Network Speed:
              type: string
            Storage:
              type: string
            Message Broker Tenancy:
              type: string
            Queues:
              type: string
            Clients:
              type: string
            Network Usage:
              type: string
          required:
          - High Availability
          - Network Speed
          - Storage
          - Message Broker Tenancy
          - Queues
          - Clients
          - Network Usage
        accountingLimits:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              value:
                type: string
              unit:
                type: string
              thresholds:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                    value:
                      type: string
                  required:
                  - type
                  - value
            required:
            - id
            - value
            - unit
            - thresholds
    ServicesResponse:
      description: provides information about services in the Solace Cloud account.
      type: object
      required:
      - data
      - meta
      properties:
        data:
          type: array
          items:
            "$ref": "#/components/schemas/Service"
        meta:
          type: object
          properties:
            currentTime:
              type: number
              example: 1605548717294
            pages:
              type: object
              properties:
                next-page:
                  type: number
                  example: 1
                total-pages:
                  type: number
                  example: 1
            pageNumber:
              type: number
              example: 0
            count:
              type: number
              example: 3
            pageSize:
              type: number
              example: 100
    
    Organization:
      type: object
      required:
      - name
      properties:
        name:
          type: string
          example: myorg
          pattern: ^[^\/\\\.\s"\$]{4,64}$
        cloud-token:
          oneOf:
          - type: string
            description: a Solace Cloud API Token, requires "get services" and "event portal read" permissions
            example: eyXhbGciOiJSUzI1NiIsImtpZCI6Im1hYXNfcHJvZF8yMDIwMDMyNiIsInR5cCI6IkpXVCJ9.eyJvcmcifiJzb2xhY2Vpb3R0ZWFtIiwib3JnVHlwZSI6IkVOVEVSUFJJU0UiLCJzdWIiOiIzZTJvY214MTA1IiwicGVybWlzc2lvbnMiOiJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXdBQU09IiwiYXBpVG9rZW5JZCI6Inlhb2wzc2ZveG03IiwiaXNzIjoiU29sYWNlIENvcnBvcmF0aW9uIiwiaWF0IjoxNjAzODA3NzQ1fQ.QIBpi5_U6b1DnAwbDbJiFIT0pomqa4AyOLtmSOEF6zhoxKMm4Y27WbILZnxnh_gpdX-tvt18Ycuck4xs3T5JjFfU3qrczRHSuj2vEdsCpDQWdyZTPV4NQ-zPxRvigTjaTlcdXin8XwMGh8nZdylgRMlRQjvotomnXQxgbUol0Kl1ziFFMybqeD10qCDsUW6Jv-PKibBN3cnCsWwPZX6d_XYUECs1AHjgs5pk-A8v3DHcnvbXiAP4XXrry6ztopAWKMc5rVFoB_WFY4yi0reuTYjn6Sf0g7vZxFifRZZHZmqZtNQUiX6S80eQG4kF3YDKlr5PfLDNp4iRfe0-3svIPw
          - type: object
            required:
            - eventPortal
            - cloud
            properties:
              eventPortal:
                "$ref": "#/components/schemas/CustomCloudEndpoint"
              cloud:
                "$ref": "#/components/schemas/CustomCloudEndpoint"
    CustomCloudEndpoint:
      type: object
      required:
      - baseUrl
      properties:
        baseUrl:
          type: string
          pattern: "https?:\\/\\/[A-Za-z\\.:0-9\\-]*.{0,200}$"
          example: https://solace.cloud/v1
        token:
          type: string
          example: eyXhbGciOiJSUzI1NiIsImtpZCI6Im1hYXNfcHJvZF8yMDIwMDMyNiIsInR5cCI6IkpXVCJ9.eyJvcmcifiJzb2xhY2Vpb3R0ZWFtIiwib3JnVHlwZSI6IkVOVEVSUFJJU0UiLCJzdWIiOiIzZTJvY214MTA1IiwicGVybWlzc2lvbnMiOiJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXdBQU09IiwiYXBpVG9rZW5JZCI6Inlhb2wzc2ZveG03IiwiaXNzIjoiU29sYWNlIENvcnBvcmF0aW9uIiwiaWF0IjoxNjAzODA3NzQ1fQ.QIBpi5_U6b1DnAwbDbJiFIT0pomqa4AyOLtmSOEF6zhoxKMm4Y27WbILZnxnh_gpdX-tvt18Ycuck4xs3T5JjFfU3qrczRHSuj2vEdsCpDQWdyZTPV4NQ-zPxRvigTjaTlcdXin8XwMGh8nZdylgRMlRQjvotomnXQxgbUol0Kl1ziFFMybqeD10qCDsUW6Jv-PKibBN3cnCsWwPZX6d_XYUECs1AHjgs5pk-A8v3DHcnvbXiAP4XXrry6ztopAWKMc5rVFoB_WFY4yi0reuTYjn6Sf0g7vZxFifRZZHZmqZtNQUiX6S80eQG4kF3YDKlr5PfLDNp4iRfe0-3svIPw
    History:
      type: object
      properties:
        title:
          type: string
          example: Update product "Product 1" 
        operation:
          type: string
          example: PATCH
        at:
          type: number
          description: UNIX timestamp when auditable event occurred
          example: 1610714525243
        user:
          type: string
          example: admin
        requestURI:
          type: string
          description: the request URI
        requestBody:
          type: string
        responseCode:
          type: integer
          example: 200
    Protocol:
      type: object
      required: 
      - name
      properties:
        name:
          type: string
          enum:
          - amqp
          - amqps
          - http
          - https
          - jms
          - mqtt
          - secure-mqtt
          - ws-mqtt
          - wss-mqtt
          - ws
          - wss
          - smf
          - smfs
        version:
          type: string
    WebHook:
      type: object
      required:
      - uri
      - method
      properties:
        uri:
          type: string
          pattern: "https?:\\/\\/[A-Za-z\\.:0-9\\-]*.{0,200}$"
        environments:
          type: array
          description: environments that this webhook serves, if absent webhook will be used for all environments 
          items: 
            type: string
        method:
          type: string
          enum:
          - POST
          - PUT
          default:
            POST
        mode:
          type:
            string
          enum:
          - parallel
          - serial
          default: parallel
        authentication:
          anyOf:
          - type: object
            properties: 
              username: 
                type: string
              password: 
                type: string
          - type: object
            description: A HTTP header used for authentication
            properties: 
              headerName: 
                type: string
              headerValue: 
                type: string

    Endpoint:
      type: object
      properties:
        protocol: 
          "$ref": "#/components/schemas/Protocol"

        transport:
          type: string
          example: TCP
          description: The protocol transport
        secure:
          type: string
          enum:
          - yes
          - no
        compressed:
          type: string
          enum:
          - yes
          - no
        uri:
          type: string
          format: uri
          example: "smf://1234abc.messaging.solace.cloud:55555"

          
security:
  - OpenId: []
  - BasicAuth: []
  - BearerAuth: []
tags:
  - name: apis
    description: "Represents Async API specifications. The specifications must be compliant documents in JSON or YML format"
  - name: apiProducts
    description: "An API product consists of a list of API resources (URIs) and custom metadata required by the API provider. API products enable you to bundle and distribute your APIs to multiple developer groups simultaneously"
  - name: developers
    description: "Developers must register. After they are registered, developers register their apps, choose the APIs they want to use, and receive the unique API credentials (consumer keys and secrets) needed to access APIs."
  - name: apps
    description: "Manage consumer credentials for apps"
  - name: environments
    description: "An environment provides a runtime execution context for APIs. Each environment is associated with a specific Service in the associated Solace Cloud account. Typical environments are dev, stage, prod ..."
  - name: management
    description: "Manage organization settings, audit history"
  - name: administration
    description: "Manage tenants/orgs. Requires admin access level."
  - name: eventPortal
    description: "Provides read-only access to the Solace Event Portal associated with the account. Currently provided as a utility resource so existing Async API stubs can be exported from the portal. Currently these specifications are not necessarily compliant and information such as binding is missing."
paths:
  /organizations:
    get:
      operationId: listOrganizations
      security:
      - OpenId:
        - org-admin
      tags: 
      - administration
      responses:
       '200':
         description: list of organizations
         content: 
           application/json:
             schema:
               type: array
               items:
                 "$ref": "#/components/schemas/Organization"
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
    post:
     operationId: createOrganization
     security:
     - OpenId:
       - org-admin
     tags:
     - administration
     requestBody: 
       description: "Organization"
       content: 
         "application/json": 
           schema: 
            "$ref": "#/components/schemas/Organization"    
     responses:
       '200':
         description: Updated Organization
         content: 
           application/json:
             schema:
               $ref: '#/components/schemas/Organization'
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '422': 
         description: "AlreadyExists."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
  /organizations/{organization}:
    parameters:
    - $ref: '#/components/parameters/organization'
    get:
      operationId: getOrganization
      tags: 
      - administration
      responses:
       '200':
         description: the organization
         content: 
           application/json:
             schema:
              "$ref": "#/components/schemas/Organization"
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
    patch:
     operationId: updateOrganization
     tags:
     - administration
     requestBody: 
       description: "Organization"
       content: 
         "application/json": 
           schema: 
            "$ref": "#/components/schemas/Organization"    
     responses:
       '200':
         description: Updated Organization
         content: 
           application/json:
             schema:
               $ref: '#/components/schemas/Organization'
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '422': 
         description: "AlreadyExists."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
    delete:
     operationId: deleteOrganization
     tags:
     - administration
     responses:
       '204':
         description: No content
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '422': 
         description: "AlreadyExists."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
  /{organization}/history:
    parameters:
    - $ref: '#/components/parameters/organization'
    get:
     operationId: listHistory
     tags:
      - management
     parameters:
     - $ref: '#/components/parameters/page_size'
     - $ref: '#/components/parameters/page_number'
     responses:
       '200':
         description: audit history
         content: 
           application/json:
             schema: 
              type: array
              items:
               "$ref": "#/components/schemas/History"
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
  /{organization}/token:
    parameters:
    - $ref: '#/components/parameters/organization'
    put:
      operationId: updateToken
      tags: 
      - management
      requestBody: 
       description: "Solace Cloud Token"
       content: 
         "text/plain": 
           schema: 
            type: string    
      responses:
       '201':
         description: The cloud token
         content: 
           application/json:
             schema:
               type: string
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
    get:
     operationId: getToken
     tags:
     - management
     responses:
       '200':
         description:  cloud token
         content: 
           "text/plain": 
             schema: 
              type: string    
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"

  /{organization}/apis:
    parameters:
    - $ref: '#/components/parameters/organization'
    get:
     operationId: listApis
     tags:
      - apis
     parameters:
     - $ref: '#/components/parameters/page_size'
     - $ref: '#/components/parameters/page_number'
     responses:
       '200':
         description: list of APIs
         content: 
           application/json:
             schema:
               type: array
               items:
                 type: string
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
  /{organization}/apis/{api_name}:
    parameters:
    - $ref: '#/components/parameters/organization'
    - $ref: '#/components/parameters/api_name'
    put:
      operationId: createApi
      tags: 
      - apis
      requestBody: 
       description: "Async API specification"
       content: 
         "text/plain": 
           schema: 
            type: string    
      responses:
       '201':
         description: The async API specification
         content: 
           application/json:
             schema:
               type: string
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '422': 
         description: "AlreadyExists."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
    get:
     operationId: getApi
     tags:
     - apis
     parameters:
     - name: format
       in: query
       schema:
        type: string
        enum:
        - application/json
        - application/x-yaml
     responses:
       '200':
         description:  async api sepc
         content: 
           application/json:
             schema:
               type: object
           application/x-yaml:
             schema:
               type: string
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
    patch:
     operationId: updateApi
     tags:
     - apis
     requestBody: 
       description: "async api specification"
       content: 
         "text/plain": 
           schema: 
            type: string    
     responses:
       '200':
         description: updated async api specification
         content: 
           text/plain:
             schema:
               type: string
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '422': 
         description: "AlreadyExists."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
    delete:
     operationId: deleteApi
     tags:
     - apis
     responses:
       '204':
         description: No content
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '422': 
         description: "AlreadyExists."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
  /{organization}/apiProducts:
    parameters:
    - $ref: '#/components/parameters/organization'
    post:
     operationId: createApiProduct
     tags:
     - apiProducts
     requestBody: 
       description: "Application domains have a name and topic domain."
       content: 
         "application/json": 
           schema: 
            "$ref": "#/components/schemas/APIProduct"    
     responses:
       '201':
         description: New API Product
         content: 
           application/json:
             schema:
               $ref: '#/components/schemas/APIProduct'
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '422': 
         description: "AlreadyExists."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
    get:
     operationId: listApiProducts
     tags:
      - apiProducts
     parameters:
     - $ref: '#/components/parameters/page_size'
     - $ref: '#/components/parameters/page_number'
     responses:
       '200':
         description: list of API Products
         content: 
           application/json:
             schema:
               type: array
               items:
                 $ref: '#/components/schemas/APIProduct'
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
  /{organization}/apiProducts/{api_product_name}:
    parameters:
    - $ref: '#/components/parameters/organization'
    - $ref: '#/components/parameters/api_product_name'
    get:
     operationId: getApiProduct
     tags:
     - apiProducts
     responses:
       '200':
         description:  an API Product
         content: 
           application/json:
             schema:
               $ref: '#/components/schemas/APIProduct'
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
    patch:
     operationId: updateApiProduct
     tags:
     - apiProducts
     requestBody: 
       description: "Application domains have a name and topic domain."
       content: 
         "application/json": 
           schema: 
            "$ref": "#/components/schemas/APIProductPatch"    
     responses:
       '200':
         description: Updated API Product
         content: 
           application/json:
             schema:
               $ref: '#/components/schemas/APIProduct'
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '422': 
         description: "AlreadyExists."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
    delete:
     operationId: deleteApiProduct
     tags:
     - apiProducts
     responses:
       '204':
         description: No contentt
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '422': 
         description: "AlreadyExists."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
  /{organization}/developers:
    parameters:
    - $ref: '#/components/parameters/organization'
    post:
     operationId: createDeveloper    
     tags:
     - developers
     requestBody: 
       description: "Developer account information"
       content: 
         "application/json": 
           schema: 
            "$ref": "#/components/schemas/Developer"    
     responses:
       '201':
         description: New developer
         content: 
           application/json:
             schema:
               $ref: '#/components/schemas/Developer'
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '422': 
         description: "AlreadyExists."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
    get:
     operationId: listDevelopers
     tags:
      - developers
     parameters:
     - $ref: '#/components/parameters/page_size'
     - $ref: '#/components/parameters/page_number'
     responses:
       '200':
         description: list of Developers
         content: 
           application/json:
             schema:
               type: array
               items:
                 $ref: '#/components/schemas/Developer'
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
  /{organization}/developers/{developer_username}:
    parameters:
    - $ref: '#/components/parameters/organization'
    - $ref: '#/components/parameters/developer_username'
    get:
     operationId: getDeveloper
     tags:
     - developers
     responses:
       '200':
         description:  a developer
         content: 
           application/json:
             schema:
               $ref: '#/components/schemas/Developer'
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
    patch:
     operationId: updateDeveloper
     tags:
     - developers
     requestBody: 
       description: "Application domains have a name and topic domain."
       content: 
         "application/json": 
           schema: 
            "$ref": "#/components/schemas/DeveloperPatch"    
     responses:
       '200':
         description: Updated developer
         content: 
           application/json:
             schema:
               $ref: '#/components/schemas/Developer'
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '422': 
         description: "AlreadyExists."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
    delete:
     operationId: deleteDeveloper
     tags:
     - developers
     responses:
       '204':
         description: No content
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '422': 
         description: "AlreadyExists."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
  /{organization}/developers/{developer_username}/apps:
    parameters:
    - $ref: '#/components/parameters/organization'
    - $ref: '#/components/parameters/developer_username'
    post:
     operationId: createDeveloperApp
     tags:
     - apps
     - developers
     requestBody: 
       description: "App information"
       content: 
         "application/json": 
           schema: 
            "$ref": "#/components/schemas/App"    
     responses:
       '201':
         description: New API Product
         content: 
           application/json:
             schema:
               $ref: '#/components/schemas/App'
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '422': 
         description: "AlreadyExists."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
    get:
     operationId: listDeveloperApps
     tags:
      - apps
      - developers
     parameters:
     - in: query
       name: status
       schema:
        "$ref": "#/components/schemas/AppStatus"    
     - $ref: '#/components/parameters/page_size'
     - $ref: '#/components/parameters/page_number'
     responses:
       '200':
         description: list of apps
         content: 
           application/json:
             schema:
               type: array
               items:
                 $ref: '#/components/schemas/App'
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
  /{organization}/developers/{developer_username}/apps/{app_name}:
    parameters:
    - $ref: '#/components/parameters/organization'
    - $ref: '#/components/parameters/developer_username'
    - $ref: '#/components/parameters/app_name'
    get:
     operationId: getDeveloperApp
     parameters: 
     - $ref: '#/components/parameters/topicSyntax'
     tags:
     - apps
     - developers
     responses:
       '200':
         description:  an app
         content: 
           application/json:
             schema:
               $ref: '#/components/schemas/AppResponse'
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
    patch:
     operationId: updateDeveloperApp
     tags:
     - apps
     - developers
     requestBody: 
       description: ""
       content: 
         "application/json": 
           schema: 
            "$ref": "#/components/schemas/AppPatch"    
     responses:
       '200':
         description: App
         content: 
           application/json:
             schema:
               $ref: '#/components/schemas/AppResponse'
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '422': 
         description: "AlreadyExists."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
    delete:
     operationId: deleteDeveloperApp
     tags:
     - apps
     - developers
     responses:
       '204':
         description: No contentt
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '422': 
         description: "AlreadyExists."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"

  /{organization}/apps:
    parameters:
    - $ref: '#/components/parameters/organization'
    - in: query
      name: status
      schema:
        "$ref": "#/components/schemas/AppStatus"    
    get:
     operationId: listApps
     tags:
      - apps
     parameters:
     - $ref: '#/components/parameters/page_size'
     - $ref: '#/components/parameters/page_number'
     responses:
       '200':
         description: list of apps
         content: 
           application/json:
             schema:
               type: array
               items:
                 $ref: '#/components/schemas/AppListItem'
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
  /{organization}/apps/{app_name}:
    parameters:
    - $ref: '#/components/parameters/organization'
    - $ref: '#/components/parameters/app_name'
    get:
     operationId: getApp
     parameters:
     - $ref: '#/components/parameters/topicSyntax'
     tags:
     - apps
     responses:
       '200':
         description:  an app 
         content: 
           application/json:
             schema:
               $ref: '#/components/schemas/AppResponse'
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
  /{organization}/apps/{app_name}/apis:
    parameters:
    - $ref: '#/components/parameters/organization'
    - $ref: '#/components/parameters/app_name'
    get:
     operationId: listAppApiSpecifications
     tags:
     - apps
     responses:
       '200':
         description:  an app 
         content: 
           application/json:
             schema:
               type: array
               items: 
                type: string
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
  /{organization}/apps/{app_name}/apis/{api_name}:
    parameters:
    - $ref: '#/components/parameters/app_name'
    - $ref: '#/components/parameters/organization'
    - $ref: '#/components/parameters/api_name'
    get:
     operationId: getAppApiSpecification
     tags:
     - apps
     parameters:
     - name: format
       in: query
       schema:
        type: string
        enum:
        - application/json
        - application/x-yaml
     responses:
       '200':
         description:  async api sepc
         content: 
           application/json:
             schema:
               type: object
           application/x-yaml:
             schema:
               type: string
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"

  /{organization}/environments:
    parameters:
    - $ref: '#/components/parameters/organization'
    post:
     operationId: createEnvironment
     tags:
     - environments
     requestBody: 
       description: "Environment information"
       content: 
         "application/json": 
           schema: 
            "$ref": "#/components/schemas/Environment"    
     responses:
       '201':
         description: New environment
         content: 
           application/json:
             schema:
               $ref: '#/components/schemas/Environment'
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '422': 
         description: "AlreadyExists."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
    get:
     operationId: listEnvironments
     tags:
      - environments
     parameters:
     - $ref: '#/components/parameters/page_size'
     - $ref: '#/components/parameters/page_number'
     responses:
       '200':
         description: list of environments
         content: 
           application/json:
             schema:
               type: array
               items:
                 $ref: '#/components/schemas/Environment'
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
  /{organization}/environments/{env_name}:
    parameters:
    - $ref: '#/components/parameters/organization'
    - $ref: '#/components/parameters/env_name'
    get:
     operationId: getEnvironment
     tags:
     - environments
     responses:
       '200':
         description:  environment
         content: 
           application/json:
             schema:
               $ref: '#/components/schemas/EnvironmentResponse'
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
    patch:
     operationId: updateEnvironment
     tags:
     - environments
     requestBody: 
       description: "Application domains have a name and topic domain."
       content: 
         "application/json": 
           schema: 
            "$ref": "#/components/schemas/EnvironmentPatch"    
     responses:
       '200':
         description: Updated Environment
         content: 
           application/json:
             schema:
               $ref: '#/components/schemas/Environment'
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '422': 
         description: "AlreadyExists."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
    delete:
     operationId: deleteEnvironment
     tags:
     - environments
     responses:
       '204':
         description: No contentt
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '422': 
         description: "AlreadyExists."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
  /{organization}/services:
    parameters:
    - $ref: '#/components/parameters/organization'
    get:
     operationId: listServices
     tags:
      - environments
     parameters:
     - $ref: '#/components/parameters/page_size'
     - $ref: '#/components/parameters/page_number'
     responses:
       '200':
         description: list of services on the associated Solace Cloud account
         content: 
           application/json:
             schema:
               type: array
               items:
                 $ref: '#/components/schemas/ServicesResponse'
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
  /{organization}/event-portal/apis:
    parameters:
    - $ref: '#/components/parameters/organization'
    get:
     operationId: listEventPortalApis
     tags:
      - eventPortal
     description: Returns a list of apps, maps to underlying event portal api /api/v1/eventPortal/applications
     parameters:
     - $ref: '#/components/parameters/page_size'
     - $ref: '#/components/parameters/page_number'
     - name: tags
       in: query
       description: comma separated list of tags
       example: maintenance,elevator
       schema:
        type: string
        pattern: "^[a-zA-Z0-9:]+(?:,[a-zA-Z0-9:]+)*$"
     - name: apiDomainName
       schema:
         type: string
       example: Acme Rideshare
       description: Match only apis in the given api domain.
       in: query
       required: false
     responses:
       '200':
         description:  a list of the APIs
         content: 
           application/json:
             schema:
               type: array
               items: 
                 "$ref": "#/components/schemas/APIListItem"
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
  /{organization}/event-portal/apis/{api_name}:
    parameters:
    - $ref: '#/components/parameters/organization'
    - $ref: '#/components/parameters/api_name'
    get:
     operationId: getEventPortalApi
     tags:
     - eventPortal
     responses:
       '200':
         description: the API  corresponding to the name requested
         content: 
           application/json:
             schema:
               type: array
               items: 
                 "$ref": "#/components/schemas/API"
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
  /{organization}/event-portal/apis/{api_name}/spec:
    parameters:
    - $ref: '#/components/parameters/organization'
    - $ref: '#/components/parameters/api_name'
    get:
     operationId: getEventPortalAsyncApiSpecification
     tags:
     - eventPortal
     parameters:
     - name: async_api_version
       schema:
        type: string
        example: 2.0.0
        default: 2.0.0
       in: query
       required: false
     responses:
       '200':
         description: the API domain corresponding to the name requested
         content: 
           application/json:
             schema:
               type: string
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
  /{organization}/event-portal/apiDomains:
    parameters:
    - $ref: '#/components/parameters/organization'
    get:
     operationId: listEventPortalApiDomains
     tags:
      - eventPortal
     parameters:
     - $ref: '#/components/parameters/page_size'
     - $ref: '#/components/parameters/page_number'
     responses:
       '200':
         description: the API domain corresponding to the name requested
         content: 
           application/json:
             schema:
               type: array
               items:
                 $ref: '#/components/schemas/APIDomain'
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
  /{organization}/event-portal/apiDomains/{api_domain_name}:
    parameters:
    - $ref: '#/components/parameters/organization'
    - $ref: '#/components/parameters/api_domain_name'
    get:
     operationId: getEventPortalApiDomain
     tags:
     - eventPortal
     responses:
       '200':
         description: the API domain corresponding to the name requested
         content: 
           application/json:
             schema:
               $ref: '#/components/schemas/APIDomain'
       '400': 
         description: "Bad Request."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
          "*/*": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '401': 
         description: "Unauthorized."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '403': 
         description: "Forbidden."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '404': 
         description: "Not Found."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '500': 
         description: "Internal Server Error."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '503': 
         description: "Service Unavailable."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
       '504': 
         description: "Gateway Timeout."
         content: 
          "application/json": 
           schema: 
            "$ref": "#/components/schemas/ErrorResponse"
